swagger: '2.0'
info:
  version: '1.0'
  title: Group Management  API(s)
  description: >-
    - The Group Management API resources are used to manage individual groups, their members and activities, these resources allow you to create new group, fetch/update group details, add/edit/remove memebers to a group, add/delete activities in a group and fetch all groups of a user.  
    
    <b>Note:</b> These resources can be used as a part of scripts or programs to allow authorized administrators to manage the groups.
host: staging.open-sunbird.org
basePath: /api/
securityDefinitions:
  bearer:
    type: apiKey  # arbitrary name for the security scheme
    in: header # The secrity scheme parameter is in "header"
    name: Authorization # name of the header, query parameter or cookie
  userToken:
    type: apiKey  # arbitrary name for the security scheme
    in: header # The secrity scheme parameter is in "header"
    name: x-authenticated-user-token # name of the header, query parameter or cookie
  manageduserToken:
    type: apiKey  # arbitrary name for the security scheme
    in: header # The secrity scheme parameter is in "header"
    name: x-authenticated-for # name of the header, query parameter or cookie
schemes:
  - https
paths:
  /group/v1/create:
    post:
      description: >-
        This API is used to create a group
           - The endpoint for **Create Group** is `/group/v1/create`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      summary: Create Group
      tags:
        - Group APIs
      operationId: Create Group
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: request
          in: body
          required: true
          description: >-
            - The body payload comprises of the metadata of the group being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
               - JSON
          schema:
            $ref: '#/definitions/CreateGroupRequest'
        - name: ts
          in: header
          required: false
          type: string
          description: 'Timestamp at which given API request is sent.'
        - name: X-msgid
          in: header
          required: false
          type: string
          description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'To make use of any Group API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
        - name: x-authenticated-user-token
          in: header
          required: false
          type: string
          description: >-
            It is a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password
        - name: x-authenticated-for
          in: header
          required: false
          type: string
          description: >-
            Managed User token of registered MUA user performing given API request.
      responses:
        '200':
          description: 'OK ! Successful operation."Create Group" operation was successfully executed.'
          schema:
            $ref: '#/definitions/GroupCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Create Group" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '404':
          description: 'RESOURSE NOT FOUND. The "Create Group" operation failed ! The possible reason for failure is the requested resource is not available.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
      security:
        - bearer: []
      x-unitTests: 
        - request:
            method: POST
            uri: /group/v1/create
            headers:
              x-authenticated-user-token: '{{user_id}}'
              x-authenticated-for: '{{LUA_user_id.MUA_user_id}}'
              Content-Type: application/json
              ts: 2017-05-25 10:18:56:578+0530
              Authorization: Bearer {{api_key}}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false

  /group/v1/update:
    patch:
      description:  >-
        This API is used for updating the group related details. This can also be used to add/edit/remove members of a group and also to add/remove activitties of a group. This API can add details partially as well, for example, one member in the request couldnot be added, because that member is inactive or id doesn't exist, still other properties in the request is updated. If a member is not added, only the status of that will be shown in the “errors” array in response.
          - The endpoint for **Update Group** is `/group/v1/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      summary: Update Group
      tags:
        - Group APIs
      operationId: Update Group
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description:  >-
            - The body payload comprises of the metadata about the group to be updated.
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
               - JSON
          schema:
            allOf:
              - $ref: '#/definitions/UpdateGroupRequest'
        - name: ts
          in: header
          required: false
          type: string
          description: 'Timestamp at which given API request is sent.'
        - name: X-msgid
          in: header
          required: false
          type: string
          description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Specify authorization key (format: Bearer api-key) received from administrator when performing given API request.'
        - name: X-Authenticated-User-Token
          in: header
          required: true
          type: string
          description: >-
            Access token of registered user performing given API request.
        - name: x-authenticated-for
          in: header
          required: false
          type: string
          description: >-
            Managed User token of registered MUA user performing given API request.
      responses:
        '200':
          description: 'OK ! Successful operation."Update Group" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UpdateGroupResponse'
        '400':
          description: 'BAD REQUEST. The "Update Group" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '404':
          description: 'Resource not found. The "Update Group" operation failed ! The possible reason for failure is that requested resource not found. here resource is group.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
      security:
        - bearer: []
      x-unitTests:
        - request:
            method: PATCH
            uri: /group/v1/update
            headers:
              x-authenticated-user-token: '{{user_id}}'
              x-authenticated-for: '{{LUA_user_id.MUA_user_id}}'
              Content-Type: application/json
              ts: 2017-05-25 10:18:56:578+0530
              Authorization: Bearer {{api_key}}
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  
  /group/v1/read/{groupId}:
    get:
      description: >-
        This API is used for getting a specific group, it is based on the unique ID of the group
          - The endpoint for **Get Group by Group ID** is `/group/v1/read/{groupId}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=members,activities
          - 'members' is to return all the members of the group.
          - 'activities' is to return all the activities of the group along with activity information from search service.
      summary: Get Group by Group ID
      tags:
        - Group APIs
      operationId: Get Group by Group ID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: groupId
          type: string
          required: true
          description: 'Please append a valid Group Id To the Request URL'
        - in: query
          name: fields
          type: string
          required: false
          description: 'If user need any specific values like, members and activities of the group append ''fields'' as QueryParam. Ex: fields=members,activities'
        - name: ts
          in: header
          required: false
          type: string
          description: 'Timestamp at which given API request is sent.'
        - name: X-msgid
          in: header
          required: false
          type: string
          description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Specify authorization key (format: Bearer api-key) received from administrator when performing given API request.'
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: >-
            Access token of registered user performing given API request.
        - name: x-authenticated-for
          in: header
          required: false
          type: string
          description: >-
            Managed User token of registered MUA user performing given API request.
      responses:
        '200':
          description: 'OK ! Successful operation."Get Group by Group ID" operation was successfully executed.'
          schema:
            $ref: '#/definitions/GetGroupResponse'
        '400':
          description: 'BAD REQUEST,"Get Group by Group ID" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
      security:
        - bearer: []
      x-unitTests:
        - request:
            method: GET
            uri: /group/v1/read/{groupId}
            headers:
              x-authenticated-user-token: '{{user_id}}'
              x-authenticated-for: '{{LUA_user_id.MUA_user_id}}'
              Content-Type: application/json
              ts: 2017-05-25 10:18:56:578+0530
              Authorization: Bearer {{api_key}}
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Get Group by Group ID
          x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        
  /group/v1/list:
    post:
      description: >-
        This API is used for listing groups of a particular user.
          - The endpoint for **List Group** is `/group/v1/list`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      summary: List Groups by User
      tags:
        - Group APIs
      operationId: List Groups by User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: request
          in: body
          required: true
          description: >-
            - The body payload comprises of metadata of the groups of the user being listed
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
               - JSON
             **Note**: You can list the groups based on user id
              - The userId can be passed inside the filters of the request payload
          schema:
            $ref: '#/definitions/ListGroupRequest'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'To make use of any Group API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: >-
            It is a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password
        - name: x-authenticated-for
          in: header
          required: false
          type: string
          description: >-
            Managed User token of registered MUA user performing given API request. From this LUA and MUA id are seperated and LUA is validated against user_id in x-authenticated-user-token
        - name: ts
          in: header
          required: false
          type: string
          description: >-
            Timestamp is a sequence of characters or encoded information identifying when the list group API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
        - name: X-msgid
          in: header
          required: false
          type: string
          description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
      responses:
        '200':
          description: 'OK ! Successful operation."List Group" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ListGroupResponse'
        '400':
          description: 'BAD REQUEST. The "List Group" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '404':
          description: 'Resource not found. requested resource not found'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/GroupErrorResponse'
      security:
        - bearer: []
      x-unitTests:
        - request:
            method: POST
            uri: /group/v1/list
            headers:
              Content-Type: application/json
              Authorization: Bearer {{api_key}}
              X-Authenticated-User-Token: '{{user_id}}'
              x-authenticated-for: '{{LUA_user_id.MUA_user_id}}'
              ts: 2017-05-25 10:18:56:578+0530
            body: >-
              {
                  "request": {
                      "filters":{
                        "userId":"string"
                      }
                  }
              }
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Search Group
          x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  

definitions:
  CreateGroupRequest:
    description: Create Group Object
    type: object
    allOf:
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
    properties:
      request:
        type: object
        properties:
          name:
            description: 'Represents the name of the group'
            type: string
          description:
            description: 'Represents the description of the group'
            type: string
          membershipType:
            type: string
            description: 'Represents the MembershipType (invite_only/moderated) of the group'
            default: 'invite_only'
          members:
            type: array
            items:
              type: object
              allOf:
                - $ref: "#/definitions/memberReqObject"
          activities:
            type: array
            items:
              type: object
              allOf:
                - $ref: "#/definitions/activityReqObject"
        required:
          - name
  
  GroupCreateResponse:
    description: 'The response body of create group'
    type: object
    allOf:
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
    properties:
      result:
        type: object
        properties:
          response:
            type: string
            description: 'Success or Failure'
          groupId:
            type: string
            description : 'Group id of the created group'
          errors: 
            type: object
            allOf:
              - $ref: "#/definitions/ErrorObjectForPartialSuccess"
        required:
          - groupId
          - response

  ErrorObjectForPartialSuccess:
    type: object
    properties:
      members:
        type: array
        items:
          type: object
          properties:
            useriId:
              type: string
            errorCode:
              type: string
            errorMessage:
              type: string
      activities:
        type: array
        items:
          type: object
          properties:
            activityId:
              type: string
            errorCode:
              type: string
            errorMessage:
              type: string
  
  UpdateGroupRequest:
    type: object
    properties:
      request:
        type: object
        properties:
          groupId:
            description: 'Represents the ID of the group to be updated'
            type: string
          name:
            description: 'Represents the name of the group'
            type: string
          description:
            description: 'Represents the description of the group'
            type: string
          membershipType:
            type: string
            description: 'Represents the MembershipType (invite_only/moderated) of the group'
          status:
            description: 'Represents the status (active/inactive) of the group'
            type: string
        allOf:
          - $ref: '#/definitions/MemberOperations'
          - $ref: '#/definitions/ActivityOperations'
        required:
          - groupId
    required:
      - request
      
  UpdateGroupResponse:
    description: Update response for a Group API
    type: object
    allOf:
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
      - $ref: '#/definitions/ResultWithPartialErrorResponse'
  
  ListGroupRequest:
    description: List group request
    type: object
    properties:
      filters:
        type: object
        properties:
          userId: 
            type: string
            description: 'UserId is optional'

  ListGroupResponse:
    description: The response body of List Group
    type: object
    properties:
      response:
        type: object
        properties:
          count:
            type: integer
          group:
            type: array
            items:
              type: object
              allOf:
                - $ref: '#/definitions/ListGroupResponseObject'
  
  ListGroupResponseObject:
    title: Group Response Object
    type: object
    properties:
      id:
        type: string
        description: 'Represents the id of the group'
      name:
        description: 'Represents the name of the group'
        type: string
      description:
        description: 'Represents the description of the group'
        type: string
      membershipType:
        type: string
        description: 'Represents the MembershipType (invite_only/moderated) of the group'
        default: 'invite_only'
      status:
        description: 'Represents the status (active/inactive) of the group'
        type: string
      memberRole:
        description: 'Represents the role (member/admin) of the user'
        type: string
    allOf:
      - $ref: '#/definitions/auditObject'
 
  GetGroupResponse:
    title: Group Response Object
    type: object
    properties:
      id:
        type: string
        description: 'Represents the id of the group'
      name:
        description: 'Represents the name of the group'
        type: string
      description:
        description: 'Represents the description of the group'
        type: string
      membershipType:
        type: string
        description: 'Represents the MembershipType (invite_only/moderated) of the group'
        default: 'invite_only'
      status:
        description: 'Represents the status (active/inactive) of the group'
        type: string
      members:
        type: array
        items:
          type: object
          allOf:
            - $ref: "#/definitions/memberResponse"
      activities:
        type: array
        items:
          type: object
          allOf:
            - $ref: "#/definitions/activityResponse"
    allOf:
      - $ref: '#/definitions/auditObject'
        
  GroupErrorResponse:
    type: object
    allOf:
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
      - $ref: '#/definitions/EmptyResult'
      
  UnAuthorizedResponse:
    allOf:
      - $ref: '#/definitions/ResultWithEmptyBody'
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
      
  EmptyResult:
    type: object
    properties:
      result:
        type: object
        description: Empty Result

  ResultStatus:
    type: object
    properties:
      response:
        type: string
        description: Success or Failure
        
  ResultWithEmptyBody:
    type: object
    properties:
      result:
        $ref: '#/definitions/ResultStatus'
        
  ResultWithPartialErrorResponse:
    type: object
    properties:
      result:
        type: object
        properties:
          response:
            type: string
            description: Success or Failure
          error:
            type: object
            allOf:
              - $ref: "#/definitions/ErrorObjectForPartialSuccess"
              
  auditObject:
    title: auditObject
    type: object
    properties:
      createdOn:
        type: string
        description: 'Record created date'
      createdBy:
        type: string
        description: 'Record created userid'
      updatedOn:
        type: string
        description: 'Record updated date'
      updatedBy:
        type: string
        description: 'Record updated userid'
        
  memberAuditObject:
    title: memberAuditObject
    type: object
    allOf:
      - $ref: '#/definitions/auditObject'
    properties:
      removedOn:
        type: string
        description: 'Record removed date'
      removedBy:
        type: string
        description: 'Record removed userid'
 
  memberResponse:
    title: memberResponse
    type: object
    properties:
      userName:
        type : string
        description: 'Name of the user'
    allOf:
      - $ref: '#/definitions/memberObject'
      - $ref: '#/definitions/memberAuditObject'
     
  activityResponse:
    title: activityResponse
    type: object
    allOf:
      - $ref: '#/definitions/activityObject'
    properties:
      activityInfo:
        type: object
        description : 'Activity response from content service'
        
  memberObject:
    title: memberObject
    type: object
    properties:
      groupId:
        type: string
        description : 'Group id to which the member belongs to'
      userId:
        type : string
        description: 'uuid of the member'
      role:
        type :  string
        description : 'Role of the user in group [ADMIN/MEMBER]'
      status:
        type :  string
        description : 'Status of the user in group [Active/Inactive]'
    required:
      - userId
      - groupId

  activityObject:
    title: activityObject
    type: object
    properties:
      id:
        type : string
        description: 'Id of the activity.'
      type:
        type: string
        description : 'Type of the activity'
    required:
      - id
      - type
   
  memberReqObject:
    title: memberReqObject
    type: object
    properties:
      userId:
        type : string
        description: 'uuid of the member'
      role:
        type :  string
        description : 'Role of the user in group [admin/member]'
        default: 'member'
    required:
      - userId
      
  activityReqObject:
    title: activityReqObject
    type: object
    properties:
      id:
        type : string
        description: 'Id of the activity.'
      type:
        type: string
        description : 'Type of the activity'
    required:
      - id
      - type
      
  ActivityOperations:
    type: object
    properties:
      activities:
        type: object
        properties:
          add:
            type: array
            items:
              type: object
              allOf:
                - $ref: "#/definitions/activityReqObject"
          edit:
            type: array
            items:
              type: object
              allOf:
                - $ref: "#/definitions/activityReqObject"
          remove:
            type: array
            items:
              type: string
              description: 'Id of the activity.'
                
  MemberOperations:
    type: object
    properties:
      members:
            type: object
            properties:
              add:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: "#/definitions/memberReqObject"
              edit:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: "#/definitions/memberReqObject"
              remove:
                type: array
                items:
                  type: string
                  description: 'uuid of the member'